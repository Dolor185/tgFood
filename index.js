require("dotenv").config();
const { startServer } = require("./Api/server");
const TelegramBot = require("node-telegram-bot-api");
const axios = require("axios");
const connectDB = require("./DB/db"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const NutrientLog = require("./DB/NutrientLog");
const CustomProduct = require("./DB/CustomProduct");

startServer();
connectDB();
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

let searchedFoods = {};
let isSelected = false;
let currentPage = 1;
let isAddingProduct = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ
const searchFood = async (query, page = 0) => {
  try {
    const response = await axios.get("http://localhost:3000/food-search", {
      params: { query, page },
    });
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç 'foods' –∏ –º–∞—Å—Å–∏–≤ 'food'
    if (response.data && response.data.foods && response.data.foods.food) {
      return response.data.foods.food; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    } else {
      return []; // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    }
  } catch (error) {
    console.error("Error searching for food:", error.message);
    return [];
  }
};

// –û–ø—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
const options = {
  reply_markup: {
    keyboard: [
      ["/NewProductü•ï", "/Totalüîé"], // –ö–Ω–æ–ø–∫–∏
      ["/ResetüíΩ", "/HelpüÜò"],
      ["/favourites", "/addFavourite"], // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    ],
    resize_keyboard: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    one_time_keyboard: true, // –°–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
const sendWelcomeMessage = (chatId) => {
  bot.sendMessage(
    chatId,
    `–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:`,
    options
  );
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  sendWelcomeMessage(msg.chat.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É /addFood
bot.onText(/\/NewProductü•ï/, (msg) => {
  bot.sendMessage(
    msg.chat.id,
    `–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:`,
    options // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–≤–µ—Ç–µ
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
bot.on("message", async (msg) => {
  const text = msg.text;

  if (text.startsWith("/") || isAddingProduct) return;
  if (isSelected) return;

  if (msg.text && msg.text !== "–û—Ç–º–µ–Ω–∞") {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    userSearchQueries[msg.chat.id] = text;

    const buttons = await getProducts(text, currentPage, msg.chat.id);

    if (buttons && buttons.length > 0) {
      const replyMarkup = {
        inline_keyboard: [
          ...buttons.map((button) => [
            { text: button.text, callback_data: button.callback_data },
          ]),
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          [
            { text: "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data: "previous_page" },
            { text: "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data: "next_page" },
          ],
        ],
      };

      bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", {
        reply_markup: replyMarkup,
      });
    } else {
      bot.sendMessage(msg.chat.id, `–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.`, options);
    }
  }
});
// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
let userSearchQueries = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
bot.on("callback_query", async (callbackQuery) => {
  const msg = callbackQuery.message;
  const action = callbackQuery.data; // –ü–æ–ª—É—á–∞–µ–º action –æ—Ç –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, next_page, previous_page –∏–ª–∏ food_id)

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" –∏–ª–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
  if (action.startsWith("fav_") || action.startsWith("rem_")) {
    return;
  }
  if (action === "next_page") {
    currentPage++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  } else if (action === "previous_page" && currentPage > 1) {
    currentPage--; // –£–º–µ–Ω—å—à–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ 1
  } else if (!isNaN(action)) {
    // –ï—Å–ª–∏ action ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ, —Ç–æ —ç—Ç–æ food_id –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    const foodId = action; // –ü–æ–ª—É—á–∞–µ–º food_id –∏–∑ callback_data
    isSelected = true;
    const foods = searchedFoods[msg.chat.id] || []; // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ chatId
    // –ù–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    console.log("Selected foodId:", foodId);
    const selectedFood = foods.find((food) => food.food_id === foodId);
    console.log("Selected food:", selectedFood);
    if (selectedFood) {
      const nutrients = parseNutrients(selectedFood.food_description);
      const { amount, unit } = getUnitAndAmountFromDescription(
        selectedFood.food_description
      );
      const brand = selectedFood.brand_name ? selectedFood.brand_name : "";

      // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –µ–¥–∏–Ω–∏—Ü–µ (–≥—Ä–∞–º–º—ã –∏–ª–∏ —à—Ç—É–∫–∏)
      bot.sendMessage(
        msg.chat.id,
        `–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ "${unit}" –¥–ª—è "${brand} ${selectedFood.food_name}\n ${selectedFood.food_description}":`
      );

      // –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
      bot.once("message", async (weightMsg) => {
        const quantity = parseFloat(weightMsg.text);

        if (!isNaN(quantity) && quantity > 0) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –±–∞–∑–æ–≤–æ–π –µ–¥–∏–Ω–∏—Ü—ã (100–≥ –∏–ª–∏ 1 —à—Ç—É–∫–∞)
          const adjustedNutrients = adjustNutrients(
            nutrients,
            quantity,
            amount
          );

          const userId = msg.chat.id; // –ü–æ–ª—É—á–∞–µ–º Telegram user id

          // –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
          await NutrientLog.findOneAndUpdate(
            { userId }, // –ü–æ–∏—Å–∫ –ø–æ userId
            {
              $inc: {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
                "totalNutrients.calories": adjustedNutrients.calories,
                "totalNutrients.protein": adjustedNutrients.protein,
                "totalNutrients.fat": adjustedNutrients.fat,
                "totalNutrients.carbs": adjustedNutrients.carbs,
              },
            },
            { upsert: true, new: true } // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          );

          isSelected = false;

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞–º–∏
          bot.sendMessage(
            msg.chat.id,
            `–¢—ã –¥–æ–±–∞–≤–∏–ª: ${
              selectedFood.food_description
            }, ${quantity} ${unit}\n–ö–ë–ñ–£: ${adjustedNutrients.calories.toFixed(
              2
            )} –∫–∫–∞–ª, ${adjustedNutrients.protein.toFixed(
              2
            )} –≥ –±–µ–ª–∫–æ–≤, ${adjustedNutrients.fat.toFixed(
              2
            )} –≥ –∂–∏—Ä–æ–≤, ${adjustedNutrients.carbs.toFixed(2)} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤`,
            options // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –æ—Ç–≤–µ—Ç–µ
          );
        } else {
          bot.sendMessage(
            msg.chat.id,
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.`,
            options
          );
        }
      });
    } else {
      bot.sendMessage(msg.chat.id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", options);
    }
    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –±—ã–ª –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
    const searchQuery = userSearchQueries[msg.chat.id];
    if (!searchQuery) {
      bot.sendMessage(msg.chat.id, `–ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    const buttons = await getProducts(searchQuery, currentPage, msg.chat.id);

    if (buttons && buttons.length > 0) {
      const replyMarkup = {
        inline_keyboard: [
          ...buttons.map((button) => [
            { text: button.text, callback_data: button.callback_data },
          ]),
          // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
          [
            { text: "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data: "previous_page" },
            { text: "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data: "next_page" },
          ],
        ],
      };

      // –ò–∑–º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      await bot.editMessageReplyMarkup(replyMarkup, {
        chat_id: msg.chat.id,
        message_id: msg.message_id,
      });
    } else {
      bot.sendMessage(msg.chat.id, `–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`, options);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:", error);
    bot.sendMessage(msg.chat.id, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.`);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É /dayTotal
bot.onText(/\/Totalüîé/, async (msg) => {
  try {
    const userId = msg.chat.id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º chat.id –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const logs = await NutrientLog.find({ userId }).sort({ date: -1 }).limit(1); // –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ –ø–æ userId

    if (logs.length > 0) {
      const { totalNutrients } = logs[0];
      bot.sendMessage(
        msg.chat.id,
        `–í–∞—à –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫:\n –ö–∞–ª–æ—Ä–∏–∏: ${totalNutrients.calories} –∫–∫–∞–ª\n –ë–µ–ª–∫–∏: ${totalNutrients.protein}–≥\n –ñ–∏—Ä—ã: ${totalNutrients.fat}–≥\n –£–≥–ª–µ–≤–æ–¥—ã: ${totalNutrients.carbs}–≥`,
        options // –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
      );
    } else {
      bot.sendMessage(
        msg.chat.id,
        "–î–∞–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
        options
      );
    }
  } catch (error) {
    bot.sendMessage(
      msg.chat.id,
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`,
      options
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É /reset
bot.onText(/\/ResetüíΩ/, async (msg) => {
  try {
    const userId = msg.chat.id;
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await NutrientLog.updateMany(
      { userId },
      {
        $set: {
          "totalNutrients.calories": 0,
          "totalNutrients.protein": 0,
          "totalNutrients.fat": 0,
          "totalNutrients.carbs": 0,
        },
      }
    );

    bot.sendMessage(msg.chat.id, "–í–∞—à –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.", options);
  } catch (error) {
    bot.sendMessage(
      msg.chat.id,
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`,
      options
    );
  }
});

bot.onText(/\/addFavourite/, (msg) => {
  const chatId = msg.chat.id;

  bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:");

  // –û–∂–∏–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
  bot.once("message", (nameMsg) => {
    const productName = nameMsg.text;

    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥—Ä–∞–º–º:");

    // –û–∂–∏–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π
    bot.once("message", (caloriesMsg) => {
      const calories = parseFloat(caloriesMsg.text);

      if (isNaN(calories)) {
        return bot.sendMessage(
          chatId,
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π."
        );
      }

      bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –Ω–∞ 100 –≥—Ä–∞–º–º:");

      // –û–∂–∏–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤
      bot.once("message", (proteinMsg) => {
        const protein = parseFloat(proteinMsg.text);

        if (isNaN(protein)) {
          return bot.sendMessage(
            chatId,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤."
          );
        }

        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ –Ω–∞ 100 –≥—Ä–∞–º–º:");

        // –û–∂–∏–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤
        bot.once("message", (fatMsg) => {
          const fat = parseFloat(fatMsg.text);

          if (isNaN(fat)) {
            return bot.sendMessage(
              chatId,
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤."
            );
          }

          bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ 100 –≥—Ä–∞–º–º:");

          // –û–∂–∏–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤
          bot.once("message", async (carbsMsg) => {
            const carbs = parseFloat(carbsMsg.text);

            if (isNaN(carbs)) {
              return bot.sendMessage(
                chatId,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤."
              );
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ MongoDB
            const newProduct = new CustomProduct({
              userId: chatId, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              name: productName,
              calories,
              protein,
              fat,
              carbs,
            });

            try {
              await newProduct.save();
              bot.sendMessage(
                chatId,
                `–ü—Ä–æ–¥—É–∫—Ç "${productName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!`
              );
            } catch (error) {
              bot.sendMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.");
              console.error(error);
            }
          });
        });
      });
    });
  });
});

bot.onText(/\/favourites/, async (msg) => {
  const favourites = await CustomProduct.find();
  isCustomsProducts = true;
  if (favourites.length === 0) {
    bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.");
  } else {
    const buttons = favourites.map((product) => ({
      text: `${product.name} (–ö–ë–ñ–£: ${product.calories} –∫–∫–∞–ª, ${product.protein} –≥ –±–µ–ª–∫–æ–≤, ${product.fat} –≥ –∂–∏—Ä–æ–≤, ${product.carbs} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤)`,
      callback_data: `fav_${product._id}`,
    }));

    const replyMarkup = {
      inline_keyboard: buttons.map((button) => [button]),
    };

    bot.sendMessage(msg.chat.id, "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:", {
      reply_markup: replyMarkup,
    });
  }
});
// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
bot.on("callback_query", async (callbackQuery) => {
  const msg = callbackQuery.message;
  const action = callbackQuery.data;

  if (action.startsWith("fav_")) {
    const productId = action.split("_")[1];
    const product = await CustomProduct.findById(productId);

    if (product) {
      isSelected = true;
      // –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–æ–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –æ–Ω —Ö–æ—á–µ—Ç —É–∫–∞–∑–∞—Ç—å
      bot.sendMessage(
        msg.chat.id,
        `–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.name}(${product.calories}–ö|${product.protein}–ë|${product.fat}–ñ|${product.carbs}–£) –≤ –≥—Ä–∞–º–º–∞—Ö:`
      );

      // –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot.once("message", async (weightMsg) => {
        const weight = parseFloat(weightMsg.text);

        if (!isNaN(weight) && weight > 0) {
          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–∞
          const factor = weight / 100;
          const adjustedNutrients = {
            calories: product.calories * factor,
            protein: product.protein * factor,
            fat: product.fat * factor,
            carbs: product.carbs * factor,
          };

          const userId = msg.chat.id;
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
          await NutrientLog.findOneAndUpdate(
            { userId }, // –ü–æ–∏—Å–∫ –ø–æ userId
            {
              $inc: {
                "totalNutrients.calories": adjustedNutrients.calories,
                "totalNutrients.protein": adjustedNutrients.protein,
                "totalNutrients.fat": adjustedNutrients.fat,
                "totalNutrients.carbs": adjustedNutrients.carbs,
              },
            },
            { upsert: true, new: true } // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          );
          isSelected = false;
          bot.sendMessage(
            msg.chat.id,
            `–¢—ã –¥–æ–±–∞–≤–∏–ª: ${
              product.name
            }, –≤–µ—Å: ${weight} –≥\n–ö–ë–ñ–£: ${adjustedNutrients.calories.toFixed(
              2
            )} –∫–∫–∞–ª, ${adjustedNutrients.protein.toFixed(
              2
            )} –≥ –±–µ–ª–∫–æ–≤, ${adjustedNutrients.fat.toFixed(
              2
            )} –≥ –∂–∏—Ä–æ–≤, ${adjustedNutrients.carbs.toFixed(2)} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤`
          );
        } else {
          bot.sendMessage(msg.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å.");
        }
      });
    } else {
      bot.sendMessage(msg.chat.id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }
  }
});

bot.onText(/\/removeFavourite/, async (msg) => {
  const products = await CustomProduct.find();
  if (products.length === 0) {
    bot.sendMessage(msg.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.");
  } else {
    const buttons = products.map((product) => ({
      text: `${product.name} (–ö–ë–ñ–£: ${product.calories} –∫–∫–∞–ª, ${product.protein} –≥ –±–µ–ª–∫–æ–≤, ${product.fat} –≥ –∂–∏—Ä–æ–≤, ${product.carbs} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤)`,
      callback_data: `rem_${product._id}`,
    }));
    const replyMarkup = {
      inline_keyboard: buttons.map((button) => [button]),
    };
    bot.sendMessage(msg.chat.id, "–í—ã–±–∏—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", {
      reply_markup: replyMarkup,
    });
  }
});
// –ø—Ä–æ–±—É—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö !!!!!!!!
bot.on("callback_query", async (callbackQuery) => {
  const msg = callbackQuery.message;
  const action = callbackQuery.data;
  if (action.startsWith("rem_")) {
    const productId = action.split("_")[1];
    const product = await CustomProduct.findById(productId);
    if (product) {
      isSelected = true;
      const replyMarkup = {
        inline_keyboard: [
          [
            { text: "Yes", callback_data: "remY" },
            { text: "No", callback_data: "remN" },
          ],
        ],
      };

      bot.sendMessage(
        msg.chat.id,
        `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç ${product.name}?`,
        {
          reply_markup: replyMarkup,
        }
      );
    }
    bot.on("callback_query", (callbackQuery) => {
      const msg = callbackQuery.message;
      const action = callbackQuery.action;

      if (action.startsWith("remN")) {
        bot.sendMessage(msg.chat.id, `–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ`);
      }
    });
  }
});
// –ü–∞—Ä—Å–µ—Ä –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
const parseNutrients = (description) => {
  const match = description.match(
    /Calories:\s*([\d.]+)kcal.*Fat:\s*([\d.]+)g.*Carbs:\s*([\d.]+)g.*Protein:\s*([\d.]+)g/
  );
  if (!match) {
    return { calories: 0, fat: 0, carbs: 0, protein: 0 }; // –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
  }
  return {
    calories: parseFloat(match[1]),
    fat: parseFloat(match[2]),
    carbs: parseFloat(match[3]),
    protein: parseFloat(match[4]),
  };
};

const adjustNutrients = (nutrients, quantity, baseAmount) => {
  const factor = quantity / baseAmount; // –ü—Ä–æ–ø–æ—Ä—Ü–∏—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 100–≥ –∏–ª–∏ 1 —à—Ç—É–∫–∏)
  return {
    calories: nutrients.calories * factor,
    protein: nutrients.protein * factor,
    fat: nutrients.fat * factor,
    carbs: nutrients.carbs * factor,
  };
};

const getUnitAndAmountFromDescription = (description) => {
  // –ü—Ä–∏–º–µ—Ä: "Per 100g" –∏–ª–∏ "Per 1 medium apple"
  const match = description.match(/Per\s+([\d.]+)\s*(\w+\s*\w*)/);
  if (match) {
    return {
      amount: parseFloat(match[1]), // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 100 (–≥—Ä–∞–º–º) –∏–ª–∏ 1 (—è–±–ª–æ–∫–æ)
      unit: match[2], // –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "g" –∏–ª–∏ "medium apple"
    };
  }
  return { amount: 100, unit: "g" }; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 100–≥, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
};

const getProducts = async (query, page, chatId) => {
  const foods = await searchFood(query, page);

  if (foods && foods.length > 0) {
    searchedFoods[chatId] = foods;

    const buttons = foods.map((food) => {
      const nutrients = parseNutrients(food.food_description);
      let brand = food.brand_name ? food.brand_name : "";
      return {
        text: `${brand} ${food.food_name} (–ö–ë–ñ–£: ${nutrients.calories} –∫–∫–∞–ª, ${nutrients.protein} –≥ –±–µ–ª–∫–æ–≤, ${nutrients.fat} –≥ –∂–∏—Ä–æ–≤, ${nutrients.carbs} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤)`,
        callback_data: `${food.food_id}`,
      };
    });

    return buttons;
  }
};
